프론트 엔드
사용자 입장에서 불편함이 없도록 눈에 보이는 화면을 설계하고 백엔드에서 받아온 데이터를 어떻게 화면에 표출할지 고민하는 과정


백엔드
회원정보, 상품정보와 같은 데이터들을 어떻게 저장하고 관리할지와 어떤 로직을 구성해야 사용자들에게 빠른 속도로 데이터 전달이 가능할지 표현하는 과정

----------------------------------------------------------------------------------

프론트엔드 구성

웹기획자
스토리 보드라고 하는 문서 자료로 화면을 구성하고 작성하는 역할
ex) 배너의 위치, 로그인 화면 위치, 페이지 구성 및 흐름도

웹디자이너
완성된 스토리 보드를 기반으로 명확하게 로고, 이미지, 색상, 컨셉 등 디자인을 구성하는 사람

웹퍼블리셔
완성된 스토리 보드와 디자인을 가지고 직접 html, css를 이용하여 웹사이트를 구현
간단한 js를 통한 이벤트 구현

프론트엔드 개발자
js를 통한 비동기 통신 구현
js 심화 과정을 통한 자바스크립트의 실행 과정 및 순서를 파악하여 능숙하게 다룰 수 있어여함
다양한 라이브러리(도구)를 활용하여 적재 적소에 이벤트를 구현
백엔드 서버와 통신하여 얻은 데이터를 어떻게 보여줄 것인가 고민

----------------------------------------------------------------------------------

프로젝트 포지션

CTO : 기술 이사 (최고 경력자)
PMO : 해당 프로젝트의 최고 관리자, 전체 프로젝트를 관리하는 포지션

PM : 프로젝트를 지휘하는 책임자 (일정을 조율하고 주도) 
PL : 각 파트별 리더, 실질적으로 설계와 구현과 같은 실무적인 부분을 담당

PA : 프로젝트 산출물 담당자 이며 실무자(개발자)
주어진 시간과 비용에 맞게 프로젝트를 완료할 수 있도록 산출한다.

----------------------------------------------------------------------------------

HTML이란?
Hypertext(웹페이지에서 다른 페이지로 이동하거나 페이지내 다른 데이터에 접근할수 있도록 하는것)
Makup Language(웹페이지 내 컨텐츠를 어떻게 표현해야하는지 명령하는 언어)

기본적으로 태그형태를 띄고 있음
HTML에서 해당 코드가 어떠한 정보를 담고 있는지 알려주기 위한 것이며 형태는
<명령어>......</명령어>

----------------------------------------------------------------------------------

 request 와 response
 요청과 응답
 (요청) -------------------------------(응답)
 ex) 쇼핑몰 홈페이지에 접속했을 때 상품마다 URL 끝에 코드가 달라지는데 프론트 엔드 개발자는 해당 URL로 화면 레이아웃을 요청 뒤 코드를 백엔드 서버에 전달
 해당 코드에 맞는 데이터를 받아와 화면에 표출
 
 HTTP request
 HTTP response
 
 HTTP(HyperText Transfer Protocol)
 인터넷에서 데이터를 주고받을 때 사용하는 규칙, 약속
 따라서 주소에 http, https가 붙으면 해당 규약을 사용해서 데이터를 주고 받겠다는 뜻
 
 s의 유무는 http에 보안적인 요소가 추가된것을 https라고 한다
 
 ---------------------------------------------------------------------------------
 
 주소창에 주소를 입력했을 때 벌어지는 일
 
 1. 주소 입력
 2. 브라우저가 도메인(주소)를 통해 대응하는 주소 확인
 3. HTTP를 이용하여 도메인서버(주소록: 도메인 저장소)에 맞는 도메인을 찾아내 페이지요청
 4. 브라우저가 해당 서버의 HTML을 요청
 5. WAS(서버 도우미) DB를 통해서 백데이터 데이터를 가지고옴
 6. 작업 처리 결과를 서버에 전송하고 서버는 html 문서를 브라우저에 응답
 7. 브라우저는 웹 페이지 내용물을 파싱 후 
 
 --------------------------------------------------------------------------------
 
 HTML 파싱 
 
 1. 브라우저가 전달된 HTML 분석 (브라우저 로더)
 2. HTML(돔트리 생성), CSS (CSSOM)
 3. 돔트리에서 JS 적용
 4. CSSOM과 돔트리가 합쳐서 랜더링 트리 생성
 5. HTML에 CSS 결정 후 레이아웃 과정 (크기, 위치)
 6. 페인트(화면에 그리는 작업)
 
 ---------------------------------------------------------------------------------
 
 html 구조
 
      <html> 
          <head> ---- 창 이름, 웹페이지 정보 , 검색 엔진에 노출될 정보
          </head>
          <body> ---- 보이는 화면 (내용)
          </body>
      </html>
          
 ---------------------------------------------------------------------------------
 
 
 
